课程:
    a. 机房
    b. js控件
        sweetalert
        datatables
        boostrapvalidator

    c. 面向对象
        站在提供者的角度 ==》 有什么东西,能提供什么东西
            属性
            方法
        封装、继承、多态(python不涉及)鸭子类型

        封装:
            将属性(数据)和方法封装起来,只提供有限的方法或者属性给第三者,不希望第三者操作的数据和方法对外屏蔽

            类:class
            class Animal(object)
                pass

            类的实例化:
            animal = Animal()

            设置实例属性:
            animal.name = 'wangcai'

            属性访问:
            animal.name

            实例: 根据类的定义创建一个对象
            app = Flask(__name__)

            构造函数
            在调用类去实例化对象时调用的函数
            def __init__(self):
                print init

            动物:
                name
                age

            class Animal(object):
                def __init__(self, *args, **kwargs):
                    self.name = ''
                    self.age = ''

            self: 调用对象的引用(传址)


            class Animail(object):
                def __init__(self, name, age):
                    self.name = name
                    self.age = age

                def say(self):
                    print self.name + ' is saying'

                def run(self):
                    print self.name + ' is running'

            animal = Animail('dog', 15)

            animal.run()
            animal.say()

            实例:
                属性:
                    def __init__(self, *args, **kwargs):
                        self.attr = xxxx
                方法:
                    def method(self, *args, **kwargs):
                        xxxxx
                        return ''

            类:
                属性:
                    class Aninal(object):
                        atype = 'animal'

                方法:
                    @classmethod
                    def method(self, *args, **kwargs):
                        xxxxx
                        return

            实例可以调用类的属性和方法
            类的方法内不能调用实例的属性和方法

            静态函数
                class Utils(object):
                    @staticmethod
                    def smethod(*args,  **kwargs):
                        xxxx
                        return ''

                class Utils(object):
                    @staticmethod
                    def md5(text):
                        return 'ssddsfsadfsdf'


                print Utils.md5('sadfasdkf;sadf')

            私有属性和方法:
                __属性
                __方法
                class anal(object):
                    def __init__(self, name, age):
                        self.__name = name
                        self.age = age

                    def get_name(self):
                        return  self.__name

                anl = anal('ww', 5)

                print anl.age
                print anl.get_name()

            @property
            @setter.xxxxxx

            类的继承
            继承者可以用有父类的属性和方法

            class Animail(object):
                def __init__(self, name, age):
                    self.name = name
                    self.age = age

                def say(self):
                    print self.name + ' is saying'

                def run(self):
                    print self.name + ' is running'
            class dog(Animail):
                pass

            dd = dog('ww', 55)

            方法重写:
            class Animail(object):
                def __init__(self, name, age):
                    self.name = name
                    self.age = age

                def say(self):
                    print self.name + ' is saying'

                def run(self):
                    print self.name + ' is running'
            class dog(Animail):
                def run(self):
                    print 'xcvasdfdsfda'

            方法改写:
            class Animal(object):
                def __init__(self, name, age):
                    self.name = name
                    self.age = age

                def say(self):
                    print self.name + ' is saying'

                def run(self):
                    print self.name + ' is running'


            class Dog(Animal):
                def __init__(self, name, age, variety):
                    super(Dog, self).__init__(name, age)  //这里调用谁的父类,类名写谁
                    self.variety = variety

                def run(self):

                    print self.variety ,self.name ,' running'

            dd = dog('hh', 1, 'hsq')

            dd.run()
            print dd.age


d. models
    1. dbutils
        MySQLConnection
            属性
                host
                port
                user
                password
                db
                charset
                conn
                cursor
            方法
                fetch()
                execute()
                close()


    2. user
    3. asset

    使用实例化方法:
    1. 在从User中查找的时候,get*** classmethod ==> return user
    2. 添加90% ==>创建用户User实例 validate save
    3. 修改60% ==> 创建用户信息(40%)
    4. 删除id ==>classmethod, User.delete ==> classmethod



作业:
1. asset资产改为类
2. user ==> config/alert ==> sweetalert
3. mm ==>整理